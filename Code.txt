# Dependencies and Setup
import pandas as pd
import numpy as np

# File to Load (Remember to Change These)
file_to_load = "Resources/purchase_data.csv"

# Read Purchasing File and store into Pandas data frame
purchase_data = pd.read_csv(file_to_load)
Total_Number_of_Players = len(purchase_data["SN"].unique())
Total_Number_of_Players
########################################################################################################################
Number_of_Unique_Items = len(purchase_data["Item ID"].unique())
Average_Price = purchase_data["Price"].mean()
Number_of_Purchases = len(purchase_data["Purchase ID"].unique())
Total_Revenue = purchase_data["Price"].sum()
Purchasing_Analysis_Total = pd.DataFrame({
    "Number of Unique Items": [Number_of_Unique_Items],
    "Average Price": [Average_Price],
    "Number of Purchases": [Number_of_Purchases],
    "Total Revenue": [Total_Revenue]
})
Purchasing_Analysis_Total = Purchasing_Analysis_Total.round(decimals = 2)
Purchasing_Analysis_Total["Average Price"] = Purchasing_Analysis_Total["Average Price"].map("${:.2f}".format)
Purchasing_Analysis_Total["Total Revenue"] = Purchasing_Analysis_Total["Total Revenue"].map("${:,.2f}".format)
Purchasing_Analysis_Total
########################################################################################################################
M = purchase_data.loc[purchase_data["Gender"]=="Male"]
Male = len(M["SN"].unique())
Male_Percent = round(((Male/Total_Players)*100),2)
F = purchase_data.loc[purchase_data["Gender"]=="Female"]
Female = len(F["SN"].unique())
Female_Percent = round(((Female/Total_Players)*100),2)
purchase_data["Gender"].unique()
ONO = purchase_data.loc[purchase_data["Gender"]=="Other / Non-Disclosed"]
Other_NonDisclosed = len(ONO["SN"].unique())
Other_NonDisclosed_Percent = round(((Other_NonDisclosed/Total_Players)*100),2)
Gender_Demographics = pd.DataFrame({
    "Gender":["Male","Female","Other/NonDisclosed"],
    "Total Count":[Male,Female,Other_NonDisclosed],
    "Percentage of Players":[Male_Percent,Female_Percent,Other_NonDisclosed_Percent] 
})
Gender_Demographics
########################################################################################################################
Purchase_Count_Male = len(M["Gender"])
Purchase_Count_Female = len(F["Gender"])
Purchase_Count_Other_NonDisclosed = len(ONO["Gender"])
Average_Purchase_Price_Male = round(M["Price"].mean(),2)
Average_Purchase_Price_Female = round(F["Price"].mean(),2)
Average_Purchase_Price_Other_NonDisclosed = round(ONO["Price"].mean(),2)
Total_Purchase_Value_Male = M["Price"].sum()
Total_Purchase_Value_Female = F["Price"].sum()
Total_Purchase_Value_Other_NonDisclosed = ONO["Price"].sum()
Total_Purchase_Value_Other_NonDisclosed
grouped_F = F.groupby(["SN"])
F_sum = grouped_F["Price"].sum()
Avg_Total_Purchase_per_Person_Female = round(F_sum.mean(),2)
grouped_M = M.groupby(["SN"])
M_sum = grouped_M["Price"].sum()
Avg_Total_Purchase_per_Person_Male = round(M_sum.mean(),2)
grouped_ONO = ONO.groupby(["SN"])
ONO_sum = grouped_ONO["Price"].sum()
Avg_Total_Purchase_per_Person_Other_NonDisclosed = round(ONO_sum.mean(),2)
Purchasing_Analysis_Gender = pd.DataFrame({
    "Gender":["Male","Female","Other/NonDisclosed"],
    "Purchase Count":[Purchase_Count_Male,Purchase_Count_Female,Purchase_Count_Other_NonDisclosed],
    "Average Purchase Price":[Average_Purchase_Price_Male,Average_Purchase_Price_Female,Average_Purchase_Price_Other_NonDisclosed],
    "Total Purchase Value": [Total_Purchase_Value_Male,Total_Purchase_Value_Female,Total_Purchase_Value_Other_NonDisclosed],
    "Avg Total Purchase per Person": [Avg_Total_Purchase_per_Person_Male,Avg_Total_Purchase_per_Person_Female,Avg_Total_Purchase_per_Person_Other_NonDisclosed],
})
Purchasing_Analysis_Gender["Average Purchase Price"] = Purchasing_Analysis_Gender["Average Purchase Price"].map("${:,.2f}".format)
Purchasing_Analysis_Gender["Total Purchase Value"] = Purchasing_Analysis_Gender["Total Purchase Value"].map("${:,.2f}".format)
Purchasing_Analysis_Gender["Avg Total Purchase per Person"] = Purchasing_Analysis_Gender["Avg Total Purchase per Person"].map("${:,.2f}".format)
Purchasing_Analysis_Gender
########################################################################################################################
bins = [6, 9.9, 14.9, 19.9, 24.9, 29.9, 34.9, 39.9, 46]
group_names = ["<10", "10-14", "15-19", "20-24", "25-29","30-34","35-39","40+"]
purchase_data["Age Group"] = pd.cut(purchase_data["Age"], bins, labels=group_names)
a= pd.DataFrame(purchase_data.groupby('Age Group')['SN'].nunique())
a
Age_Demographics = pd.DataFrame({
    "Age Group": ["<10", "10-14", "15-19", "20-24", "25-29","30-34","35-39","40+"],
    "Total Count": [17, 22, 107, 258, 77, 52, 31, 12]
})
Age_Demographics
Sum = Age_Demographics["Total Count"].sum()
Age_Demographics["Percentage of Players"] = round(((Age_Demographics["Total Count"]/Sum)*100),2)
Age_Demographics
########################################################################################################################
grouped_purchase_data = purchase_data.groupby('Age Group')
b = grouped_purchase_data["SN"].count()
c = round(grouped_purchase_data["Price"].sum(),2)
Age_Demographics.index = b.index
Age_Demographics["Purchase Count"] = b
Age_Demographics.index = c.index
Age_Demographics["Total Purchase Value"] = c
Age_Demographics["Average Purchase Price"] = round((c/b),2)
Age_Demographics["Avg Total Purchase per Person"] = round((Age_Demographics["Total Purchase Value"]/Age_Demographics["Total Count"]),2)
Age_Demographics
Age_Demographics["Total Purchase Value"] = Age_Demographics["Total Purchase Value"].map("${:,.2f}".format)
Age_Demographics["Average Purchase Price"] = Age_Demographics["Average Purchase Price"].map("${:,.2f}".format)
Age_Demographics["Avg Total Purchase per Person"] = Age_Demographics["Avg Total Purchase per Person"].map("${:,.2f}".format)
Purchasing_Analysis_Age = Age_Demographics.drop(('Age Group'),axis = 'columns')
Purchasing_Analysis_Age.drop(['Percentage of Players', 'Total Count'], axis=1, inplace=True)
Purchasing_Analysis_Age
########################################################################################################################
Top_Spenders = pd.DataFrame(purchase_data["SN"].value_counts())
group = purchase_data.groupby(['SN'])
Top_Spenders["Total Purchase Value"] = round(group["Price"].sum(),2)
Top_Spenders.reset_index(inplace = True)
Top_Spenders = Top_Spenders.rename(columns={"index":"SN", "SN":"Purchase Count"})
Top_Spenders["Average Purchase Price"] = round((Top_Spenders["Total Purchase Value"]/Top_Spenders["Purchase Count"]),2)
Top_Spenders["Total Purchase Value"] = Top_Spenders["Total Purchase Value"].map("${:,.2f}".format)
Top_Spenders["Average Purchase Price"] = Top_Spenders["Average Purchase Price"].map("${:,.2f}".format)
Top_Spenders
########################################################################################################################
w = purchase_data.groupby(['Item ID','Item Name'])
x = pd.DataFrame(round(w["Price"].sum(),2))
x = x.rename(columns={"Price":"Total Purchase Value"})
y = pd.DataFrame(purchase_data["Item Name"].value_counts())
y = y.rename(columns={"Item Name":"Purchase Count"})
y.reset_index(inplace = True)
y = y.rename(columns={"index":"Item Name"})
x.reset_index(inplace = True)
m = pd.merge(x, y, how = "outer")
z = pd.merge(m, purchase_data, how = "left")
z = z.drop_duplicates(subset=['Item Name'], keep='first')
z.drop(['Purchase ID', 'SN','Age','Gender','Age Group'], axis=1, inplace=True)
z = z.rename(columns={"Price":"Item Price"})
Most_Popular_Items = z[["Item ID","Item Name","Purchase Count","Item Price","Total Purchase Value"]]
Most_Popular_Items
########################################################################################################################
Most_Profitable_Items = Most_Popular_Items.sort_values("Total Purchase Value", ascending=False)
Most_Profitable_Items["Item Price"] = Most_Profitable_Items["Item Price"].map("${:,.2f}".format)
Most_Profitable_Items["Total Purchase Value"] = Most_Profitable_Items["Total Purchase Value"].map("${:,.2f}".format)
Most_Profitable_Items
########################################################################################################################